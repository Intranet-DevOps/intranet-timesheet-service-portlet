/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package sg.com.para.intranet.timesheet.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import sg.com.para.intranet.timesheet.services.model.TimesheetMonth;
import sg.com.para.intranet.timesheet.services.model.TimesheetMonthModel;
import sg.com.para.intranet.timesheet.services.model.TimesheetMonthSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TimesheetMonth service. Represents a row in the &quot;intranet_timesheet_month&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link sg.com.para.intranet.timesheet.services.model.TimesheetMonthModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TimesheetMonthImpl}.
 * </p>
 *
 * @author Fernando Karnagi
 * @see TimesheetMonthImpl
 * @see sg.com.para.intranet.timesheet.services.model.TimesheetMonth
 * @see sg.com.para.intranet.timesheet.services.model.TimesheetMonthModel
 * @generated
 */
@JSON(strict = true)
public class TimesheetMonthModelImpl extends BaseModelImpl<TimesheetMonth>
	implements TimesheetMonthModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a timesheet month model instance should use the {@link sg.com.para.intranet.timesheet.services.model.TimesheetMonth} interface instead.
	 */
	public static final String TABLE_NAME = "intranet_timesheet_month";
	public static final Object[][] TABLE_COLUMNS = {
			{ "timesheetMonthId", Types.INTEGER },
			{ "month", Types.INTEGER },
			{ "year", Types.INTEGER },
			{ "employeeScreenName", Types.VARCHAR },
			{ "status", Types.VARCHAR },
			{ "submittedDate", Types.TIMESTAMP },
			{ "approvedBy", Types.VARCHAR },
			{ "approvedDate", Types.TIMESTAMP },
			{ "processedBy", Types.VARCHAR },
			{ "processedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table intranet_timesheet_month (timesheetMonthId INTEGER not null primary key,month INTEGER,year INTEGER,employeeScreenName VARCHAR(75) null,status VARCHAR(75) null,submittedDate DATE null,approvedBy VARCHAR(75) null,approvedDate DATE null,processedBy VARCHAR(75) null,processedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table intranet_timesheet_month";
	public static final String ORDER_BY_JPQL = " ORDER BY timesheetMonth.timesheetMonthId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY intranet_timesheet_month.timesheetMonthId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.sg.com.para.intranet.timesheet.services.model.TimesheetMonth"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.sg.com.para.intranet.timesheet.services.model.TimesheetMonth"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TimesheetMonth toModel(TimesheetMonthSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TimesheetMonth model = new TimesheetMonthImpl();

		model.setTimesheetMonthId(soapModel.getTimesheetMonthId());
		model.setMonth(soapModel.getMonth());
		model.setYear(soapModel.getYear());
		model.setEmployeeScreenName(soapModel.getEmployeeScreenName());
		model.setStatus(soapModel.getStatus());
		model.setSubmittedDate(soapModel.getSubmittedDate());
		model.setApprovedBy(soapModel.getApprovedBy());
		model.setApprovedDate(soapModel.getApprovedDate());
		model.setProcessedBy(soapModel.getProcessedBy());
		model.setProcessedDate(soapModel.getProcessedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TimesheetMonth> toModels(TimesheetMonthSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TimesheetMonth> models = new ArrayList<TimesheetMonth>(soapModels.length);

		for (TimesheetMonthSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.sg.com.para.intranet.timesheet.services.model.TimesheetMonth"));

	public TimesheetMonthModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _timesheetMonthId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setTimesheetMonthId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _timesheetMonthId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TimesheetMonth.class;
	}

	@Override
	public String getModelClassName() {
		return TimesheetMonth.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("timesheetMonthId", getTimesheetMonthId());
		attributes.put("month", getMonth());
		attributes.put("year", getYear());
		attributes.put("employeeScreenName", getEmployeeScreenName());
		attributes.put("status", getStatus());
		attributes.put("submittedDate", getSubmittedDate());
		attributes.put("approvedBy", getApprovedBy());
		attributes.put("approvedDate", getApprovedDate());
		attributes.put("processedBy", getProcessedBy());
		attributes.put("processedDate", getProcessedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer timesheetMonthId = (Integer)attributes.get("timesheetMonthId");

		if (timesheetMonthId != null) {
			setTimesheetMonthId(timesheetMonthId);
		}

		Integer month = (Integer)attributes.get("month");

		if (month != null) {
			setMonth(month);
		}

		Integer year = (Integer)attributes.get("year");

		if (year != null) {
			setYear(year);
		}

		String employeeScreenName = (String)attributes.get("employeeScreenName");

		if (employeeScreenName != null) {
			setEmployeeScreenName(employeeScreenName);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Date submittedDate = (Date)attributes.get("submittedDate");

		if (submittedDate != null) {
			setSubmittedDate(submittedDate);
		}

		String approvedBy = (String)attributes.get("approvedBy");

		if (approvedBy != null) {
			setApprovedBy(approvedBy);
		}

		Date approvedDate = (Date)attributes.get("approvedDate");

		if (approvedDate != null) {
			setApprovedDate(approvedDate);
		}

		String processedBy = (String)attributes.get("processedBy");

		if (processedBy != null) {
			setProcessedBy(processedBy);
		}

		Date processedDate = (Date)attributes.get("processedDate");

		if (processedDate != null) {
			setProcessedDate(processedDate);
		}
	}

	@JSON
	@Override
	public int getTimesheetMonthId() {
		return _timesheetMonthId;
	}

	@Override
	public void setTimesheetMonthId(int timesheetMonthId) {
		_timesheetMonthId = timesheetMonthId;
	}

	@JSON
	@Override
	public int getMonth() {
		return _month;
	}

	@Override
	public void setMonth(int month) {
		_month = month;
	}

	@JSON
	@Override
	public int getYear() {
		return _year;
	}

	@Override
	public void setYear(int year) {
		_year = year;
	}

	@JSON
	@Override
	public String getEmployeeScreenName() {
		if (_employeeScreenName == null) {
			return StringPool.BLANK;
		}
		else {
			return _employeeScreenName;
		}
	}

	@Override
	public void setEmployeeScreenName(String employeeScreenName) {
		_employeeScreenName = employeeScreenName;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@JSON
	@Override
	public Date getSubmittedDate() {
		return _submittedDate;
	}

	@Override
	public void setSubmittedDate(Date submittedDate) {
		_submittedDate = submittedDate;
	}

	@JSON
	@Override
	public String getApprovedBy() {
		if (_approvedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _approvedBy;
		}
	}

	@Override
	public void setApprovedBy(String approvedBy) {
		_approvedBy = approvedBy;
	}

	@JSON
	@Override
	public Date getApprovedDate() {
		return _approvedDate;
	}

	@Override
	public void setApprovedDate(Date approvedDate) {
		_approvedDate = approvedDate;
	}

	@JSON
	@Override
	public String getProcessedBy() {
		if (_processedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _processedBy;
		}
	}

	@Override
	public void setProcessedBy(String processedBy) {
		_processedBy = processedBy;
	}

	@JSON
	@Override
	public Date getProcessedDate() {
		return _processedDate;
	}

	@Override
	public void setProcessedDate(Date processedDate) {
		_processedDate = processedDate;
	}

	@Override
	public TimesheetMonth toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TimesheetMonth)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TimesheetMonthImpl timesheetMonthImpl = new TimesheetMonthImpl();

		timesheetMonthImpl.setTimesheetMonthId(getTimesheetMonthId());
		timesheetMonthImpl.setMonth(getMonth());
		timesheetMonthImpl.setYear(getYear());
		timesheetMonthImpl.setEmployeeScreenName(getEmployeeScreenName());
		timesheetMonthImpl.setStatus(getStatus());
		timesheetMonthImpl.setSubmittedDate(getSubmittedDate());
		timesheetMonthImpl.setApprovedBy(getApprovedBy());
		timesheetMonthImpl.setApprovedDate(getApprovedDate());
		timesheetMonthImpl.setProcessedBy(getProcessedBy());
		timesheetMonthImpl.setProcessedDate(getProcessedDate());

		timesheetMonthImpl.resetOriginalValues();

		return timesheetMonthImpl;
	}

	@Override
	public int compareTo(TimesheetMonth timesheetMonth) {
		int primaryKey = timesheetMonth.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TimesheetMonth)) {
			return false;
		}

		TimesheetMonth timesheetMonth = (TimesheetMonth)obj;

		int primaryKey = timesheetMonth.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TimesheetMonth> toCacheModel() {
		TimesheetMonthCacheModel timesheetMonthCacheModel = new TimesheetMonthCacheModel();

		timesheetMonthCacheModel.timesheetMonthId = getTimesheetMonthId();

		timesheetMonthCacheModel.month = getMonth();

		timesheetMonthCacheModel.year = getYear();

		timesheetMonthCacheModel.employeeScreenName = getEmployeeScreenName();

		String employeeScreenName = timesheetMonthCacheModel.employeeScreenName;

		if ((employeeScreenName != null) && (employeeScreenName.length() == 0)) {
			timesheetMonthCacheModel.employeeScreenName = null;
		}

		timesheetMonthCacheModel.status = getStatus();

		String status = timesheetMonthCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			timesheetMonthCacheModel.status = null;
		}

		Date submittedDate = getSubmittedDate();

		if (submittedDate != null) {
			timesheetMonthCacheModel.submittedDate = submittedDate.getTime();
		}
		else {
			timesheetMonthCacheModel.submittedDate = Long.MIN_VALUE;
		}

		timesheetMonthCacheModel.approvedBy = getApprovedBy();

		String approvedBy = timesheetMonthCacheModel.approvedBy;

		if ((approvedBy != null) && (approvedBy.length() == 0)) {
			timesheetMonthCacheModel.approvedBy = null;
		}

		Date approvedDate = getApprovedDate();

		if (approvedDate != null) {
			timesheetMonthCacheModel.approvedDate = approvedDate.getTime();
		}
		else {
			timesheetMonthCacheModel.approvedDate = Long.MIN_VALUE;
		}

		timesheetMonthCacheModel.processedBy = getProcessedBy();

		String processedBy = timesheetMonthCacheModel.processedBy;

		if ((processedBy != null) && (processedBy.length() == 0)) {
			timesheetMonthCacheModel.processedBy = null;
		}

		Date processedDate = getProcessedDate();

		if (processedDate != null) {
			timesheetMonthCacheModel.processedDate = processedDate.getTime();
		}
		else {
			timesheetMonthCacheModel.processedDate = Long.MIN_VALUE;
		}

		return timesheetMonthCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{timesheetMonthId=");
		sb.append(getTimesheetMonthId());
		sb.append(", month=");
		sb.append(getMonth());
		sb.append(", year=");
		sb.append(getYear());
		sb.append(", employeeScreenName=");
		sb.append(getEmployeeScreenName());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", submittedDate=");
		sb.append(getSubmittedDate());
		sb.append(", approvedBy=");
		sb.append(getApprovedBy());
		sb.append(", approvedDate=");
		sb.append(getApprovedDate());
		sb.append(", processedBy=");
		sb.append(getProcessedBy());
		sb.append(", processedDate=");
		sb.append(getProcessedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append(
			"sg.com.para.intranet.timesheet.services.model.TimesheetMonth");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>timesheetMonthId</column-name><column-value><![CDATA[");
		sb.append(getTimesheetMonthId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>month</column-name><column-value><![CDATA[");
		sb.append(getMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>year</column-name><column-value><![CDATA[");
		sb.append(getYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeScreenName</column-name><column-value><![CDATA[");
		sb.append(getEmployeeScreenName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submittedDate</column-name><column-value><![CDATA[");
		sb.append(getSubmittedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvedBy</column-name><column-value><![CDATA[");
		sb.append(getApprovedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvedDate</column-name><column-value><![CDATA[");
		sb.append(getApprovedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processedBy</column-name><column-value><![CDATA[");
		sb.append(getProcessedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processedDate</column-name><column-value><![CDATA[");
		sb.append(getProcessedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TimesheetMonth.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TimesheetMonth.class
		};
	private int _timesheetMonthId;
	private int _month;
	private int _year;
	private String _employeeScreenName;
	private String _status;
	private Date _submittedDate;
	private String _approvedBy;
	private Date _approvedDate;
	private String _processedBy;
	private Date _processedDate;
	private TimesheetMonth _escapedModel;
}
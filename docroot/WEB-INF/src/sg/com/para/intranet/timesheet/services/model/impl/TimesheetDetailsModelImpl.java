/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package sg.com.para.intranet.timesheet.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import sg.com.para.intranet.timesheet.services.model.TimesheetDetails;
import sg.com.para.intranet.timesheet.services.model.TimesheetDetailsModel;
import sg.com.para.intranet.timesheet.services.model.TimesheetDetailsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TimesheetDetails service. Represents a row in the &quot;intranet_timesheet_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link sg.com.para.intranet.timesheet.services.model.TimesheetDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TimesheetDetailsImpl}.
 * </p>
 *
 * @author Fernando Karnagi
 * @see TimesheetDetailsImpl
 * @see sg.com.para.intranet.timesheet.services.model.TimesheetDetails
 * @see sg.com.para.intranet.timesheet.services.model.TimesheetDetailsModel
 * @generated
 */
@JSON(strict = true)
public class TimesheetDetailsModelImpl extends BaseModelImpl<TimesheetDetails>
	implements TimesheetDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a timesheet details model instance should use the {@link sg.com.para.intranet.timesheet.services.model.TimesheetDetails} interface instead.
	 */
	public static final String TABLE_NAME = "intranet_timesheet_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "timesheetDetailsId", Types.INTEGER },
			{ "timesheetId", Types.INTEGER },
			{ "clockInTime", Types.TIMESTAMP },
			{ "clockOutTime", Types.TIMESTAMP },
			{ "remarks", Types.VARCHAR },
			{ "type_", Types.VARCHAR },
			{ "fulldayOrTimeBased", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table intranet_timesheet_details (timesheetDetailsId INTEGER not null primary key,timesheetId INTEGER,clockInTime DATE null,clockOutTime DATE null,remarks VARCHAR(75) null,type_ VARCHAR(75) null,fulldayOrTimeBased VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table intranet_timesheet_details";
	public static final String ORDER_BY_JPQL = " ORDER BY timesheetDetails.timesheetDetailsId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY intranet_timesheet_details.timesheetDetailsId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.sg.com.para.intranet.timesheet.services.model.TimesheetDetails"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.sg.com.para.intranet.timesheet.services.model.TimesheetDetails"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TimesheetDetails toModel(TimesheetDetailsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TimesheetDetails model = new TimesheetDetailsImpl();

		model.setTimesheetDetailsId(soapModel.getTimesheetDetailsId());
		model.setTimesheetId(soapModel.getTimesheetId());
		model.setClockInTime(soapModel.getClockInTime());
		model.setClockOutTime(soapModel.getClockOutTime());
		model.setRemarks(soapModel.getRemarks());
		model.setType(soapModel.getType());
		model.setFulldayOrTimeBased(soapModel.getFulldayOrTimeBased());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TimesheetDetails> toModels(
		TimesheetDetailsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TimesheetDetails> models = new ArrayList<TimesheetDetails>(soapModels.length);

		for (TimesheetDetailsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.sg.com.para.intranet.timesheet.services.model.TimesheetDetails"));

	public TimesheetDetailsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _timesheetDetailsId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setTimesheetDetailsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _timesheetDetailsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TimesheetDetails.class;
	}

	@Override
	public String getModelClassName() {
		return TimesheetDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("timesheetDetailsId", getTimesheetDetailsId());
		attributes.put("timesheetId", getTimesheetId());
		attributes.put("clockInTime", getClockInTime());
		attributes.put("clockOutTime", getClockOutTime());
		attributes.put("remarks", getRemarks());
		attributes.put("type", getType());
		attributes.put("fulldayOrTimeBased", getFulldayOrTimeBased());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer timesheetDetailsId = (Integer)attributes.get(
				"timesheetDetailsId");

		if (timesheetDetailsId != null) {
			setTimesheetDetailsId(timesheetDetailsId);
		}

		Integer timesheetId = (Integer)attributes.get("timesheetId");

		if (timesheetId != null) {
			setTimesheetId(timesheetId);
		}

		Date clockInTime = (Date)attributes.get("clockInTime");

		if (clockInTime != null) {
			setClockInTime(clockInTime);
		}

		Date clockOutTime = (Date)attributes.get("clockOutTime");

		if (clockOutTime != null) {
			setClockOutTime(clockOutTime);
		}

		String remarks = (String)attributes.get("remarks");

		if (remarks != null) {
			setRemarks(remarks);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String fulldayOrTimeBased = (String)attributes.get("fulldayOrTimeBased");

		if (fulldayOrTimeBased != null) {
			setFulldayOrTimeBased(fulldayOrTimeBased);
		}
	}

	@JSON
	@Override
	public int getTimesheetDetailsId() {
		return _timesheetDetailsId;
	}

	@Override
	public void setTimesheetDetailsId(int timesheetDetailsId) {
		_timesheetDetailsId = timesheetDetailsId;
	}

	@JSON
	@Override
	public int getTimesheetId() {
		return _timesheetId;
	}

	@Override
	public void setTimesheetId(int timesheetId) {
		_timesheetId = timesheetId;
	}

	@JSON
	@Override
	public Date getClockInTime() {
		return _clockInTime;
	}

	@Override
	public void setClockInTime(Date clockInTime) {
		_clockInTime = clockInTime;
	}

	@JSON
	@Override
	public Date getClockOutTime() {
		return _clockOutTime;
	}

	@Override
	public void setClockOutTime(Date clockOutTime) {
		_clockOutTime = clockOutTime;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@JSON
	@Override
	public String getFulldayOrTimeBased() {
		if (_fulldayOrTimeBased == null) {
			return StringPool.BLANK;
		}
		else {
			return _fulldayOrTimeBased;
		}
	}

	@Override
	public void setFulldayOrTimeBased(String fulldayOrTimeBased) {
		_fulldayOrTimeBased = fulldayOrTimeBased;
	}

	@Override
	public TimesheetDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TimesheetDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TimesheetDetailsImpl timesheetDetailsImpl = new TimesheetDetailsImpl();

		timesheetDetailsImpl.setTimesheetDetailsId(getTimesheetDetailsId());
		timesheetDetailsImpl.setTimesheetId(getTimesheetId());
		timesheetDetailsImpl.setClockInTime(getClockInTime());
		timesheetDetailsImpl.setClockOutTime(getClockOutTime());
		timesheetDetailsImpl.setRemarks(getRemarks());
		timesheetDetailsImpl.setType(getType());
		timesheetDetailsImpl.setFulldayOrTimeBased(getFulldayOrTimeBased());

		timesheetDetailsImpl.resetOriginalValues();

		return timesheetDetailsImpl;
	}

	@Override
	public int compareTo(TimesheetDetails timesheetDetails) {
		int primaryKey = timesheetDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TimesheetDetails)) {
			return false;
		}

		TimesheetDetails timesheetDetails = (TimesheetDetails)obj;

		int primaryKey = timesheetDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TimesheetDetails> toCacheModel() {
		TimesheetDetailsCacheModel timesheetDetailsCacheModel = new TimesheetDetailsCacheModel();

		timesheetDetailsCacheModel.timesheetDetailsId = getTimesheetDetailsId();

		timesheetDetailsCacheModel.timesheetId = getTimesheetId();

		Date clockInTime = getClockInTime();

		if (clockInTime != null) {
			timesheetDetailsCacheModel.clockInTime = clockInTime.getTime();
		}
		else {
			timesheetDetailsCacheModel.clockInTime = Long.MIN_VALUE;
		}

		Date clockOutTime = getClockOutTime();

		if (clockOutTime != null) {
			timesheetDetailsCacheModel.clockOutTime = clockOutTime.getTime();
		}
		else {
			timesheetDetailsCacheModel.clockOutTime = Long.MIN_VALUE;
		}

		timesheetDetailsCacheModel.remarks = getRemarks();

		String remarks = timesheetDetailsCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			timesheetDetailsCacheModel.remarks = null;
		}

		timesheetDetailsCacheModel.type = getType();

		String type = timesheetDetailsCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			timesheetDetailsCacheModel.type = null;
		}

		timesheetDetailsCacheModel.fulldayOrTimeBased = getFulldayOrTimeBased();

		String fulldayOrTimeBased = timesheetDetailsCacheModel.fulldayOrTimeBased;

		if ((fulldayOrTimeBased != null) && (fulldayOrTimeBased.length() == 0)) {
			timesheetDetailsCacheModel.fulldayOrTimeBased = null;
		}

		return timesheetDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{timesheetDetailsId=");
		sb.append(getTimesheetDetailsId());
		sb.append(", timesheetId=");
		sb.append(getTimesheetId());
		sb.append(", clockInTime=");
		sb.append(getClockInTime());
		sb.append(", clockOutTime=");
		sb.append(getClockOutTime());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", fulldayOrTimeBased=");
		sb.append(getFulldayOrTimeBased());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append(
			"sg.com.para.intranet.timesheet.services.model.TimesheetDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>timesheetDetailsId</column-name><column-value><![CDATA[");
		sb.append(getTimesheetDetailsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timesheetId</column-name><column-value><![CDATA[");
		sb.append(getTimesheetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clockInTime</column-name><column-value><![CDATA[");
		sb.append(getClockInTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clockOutTime</column-name><column-value><![CDATA[");
		sb.append(getClockOutTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fulldayOrTimeBased</column-name><column-value><![CDATA[");
		sb.append(getFulldayOrTimeBased());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TimesheetDetails.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TimesheetDetails.class
		};
	private int _timesheetDetailsId;
	private int _timesheetId;
	private Date _clockInTime;
	private Date _clockOutTime;
	private String _remarks;
	private String _type;
	private String _fulldayOrTimeBased;
	private TimesheetDetails _escapedModel;
}
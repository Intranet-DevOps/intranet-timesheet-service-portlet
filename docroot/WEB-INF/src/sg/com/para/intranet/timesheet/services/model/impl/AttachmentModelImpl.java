/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package sg.com.para.intranet.timesheet.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import sg.com.para.intranet.timesheet.services.model.Attachment;
import sg.com.para.intranet.timesheet.services.model.AttachmentModel;
import sg.com.para.intranet.timesheet.services.model.AttachmentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Attachment service. Represents a row in the &quot;intranet_attachment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link sg.com.para.intranet.timesheet.services.model.AttachmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttachmentImpl}.
 * </p>
 *
 * @author Fernando Karnagi
 * @see AttachmentImpl
 * @see sg.com.para.intranet.timesheet.services.model.Attachment
 * @see sg.com.para.intranet.timesheet.services.model.AttachmentModel
 * @generated
 */
@JSON(strict = true)
public class AttachmentModelImpl extends BaseModelImpl<Attachment>
	implements AttachmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attachment model instance should use the {@link sg.com.para.intranet.timesheet.services.model.Attachment} interface instead.
	 */
	public static final String TABLE_NAME = "intranet_attachment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "attachmentId", Types.INTEGER },
			{ "entityType", Types.VARCHAR },
			{ "entityId", Types.INTEGER },
			{ "attachmentText", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table intranet_attachment (attachmentId INTEGER not null primary key,entityType VARCHAR(75) null,entityId INTEGER,attachmentText VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table intranet_attachment";
	public static final String ORDER_BY_JPQL = " ORDER BY attachment.attachmentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY intranet_attachment.attachmentId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.sg.com.para.intranet.timesheet.services.model.Attachment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.sg.com.para.intranet.timesheet.services.model.Attachment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Attachment toModel(AttachmentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Attachment model = new AttachmentImpl();

		model.setAttachmentId(soapModel.getAttachmentId());
		model.setEntityType(soapModel.getEntityType());
		model.setEntityId(soapModel.getEntityId());
		model.setAttachmentText(soapModel.getAttachmentText());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Attachment> toModels(AttachmentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Attachment> models = new ArrayList<Attachment>(soapModels.length);

		for (AttachmentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.sg.com.para.intranet.timesheet.services.model.Attachment"));

	public AttachmentModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _attachmentId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setAttachmentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attachmentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Attachment.class;
	}

	@Override
	public String getModelClassName() {
		return Attachment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("attachmentId", getAttachmentId());
		attributes.put("entityType", getEntityType());
		attributes.put("entityId", getEntityId());
		attributes.put("attachmentText", getAttachmentText());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer attachmentId = (Integer)attributes.get("attachmentId");

		if (attachmentId != null) {
			setAttachmentId(attachmentId);
		}

		String entityType = (String)attributes.get("entityType");

		if (entityType != null) {
			setEntityType(entityType);
		}

		Integer entityId = (Integer)attributes.get("entityId");

		if (entityId != null) {
			setEntityId(entityId);
		}

		String attachmentText = (String)attributes.get("attachmentText");

		if (attachmentText != null) {
			setAttachmentText(attachmentText);
		}
	}

	@JSON
	@Override
	public int getAttachmentId() {
		return _attachmentId;
	}

	@Override
	public void setAttachmentId(int attachmentId) {
		_attachmentId = attachmentId;
	}

	@JSON
	@Override
	public String getEntityType() {
		if (_entityType == null) {
			return StringPool.BLANK;
		}
		else {
			return _entityType;
		}
	}

	@Override
	public void setEntityType(String entityType) {
		_entityType = entityType;
	}

	@JSON
	@Override
	public int getEntityId() {
		return _entityId;
	}

	@Override
	public void setEntityId(int entityId) {
		_entityId = entityId;
	}

	@JSON
	@Override
	public String getAttachmentText() {
		if (_attachmentText == null) {
			return StringPool.BLANK;
		}
		else {
			return _attachmentText;
		}
	}

	@Override
	public void setAttachmentText(String attachmentText) {
		_attachmentText = attachmentText;
	}

	@Override
	public Attachment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Attachment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttachmentImpl attachmentImpl = new AttachmentImpl();

		attachmentImpl.setAttachmentId(getAttachmentId());
		attachmentImpl.setEntityType(getEntityType());
		attachmentImpl.setEntityId(getEntityId());
		attachmentImpl.setAttachmentText(getAttachmentText());

		attachmentImpl.resetOriginalValues();

		return attachmentImpl;
	}

	@Override
	public int compareTo(Attachment attachment) {
		int primaryKey = attachment.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Attachment)) {
			return false;
		}

		Attachment attachment = (Attachment)obj;

		int primaryKey = attachment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Attachment> toCacheModel() {
		AttachmentCacheModel attachmentCacheModel = new AttachmentCacheModel();

		attachmentCacheModel.attachmentId = getAttachmentId();

		attachmentCacheModel.entityType = getEntityType();

		String entityType = attachmentCacheModel.entityType;

		if ((entityType != null) && (entityType.length() == 0)) {
			attachmentCacheModel.entityType = null;
		}

		attachmentCacheModel.entityId = getEntityId();

		attachmentCacheModel.attachmentText = getAttachmentText();

		String attachmentText = attachmentCacheModel.attachmentText;

		if ((attachmentText != null) && (attachmentText.length() == 0)) {
			attachmentCacheModel.attachmentText = null;
		}

		return attachmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{attachmentId=");
		sb.append(getAttachmentId());
		sb.append(", entityType=");
		sb.append(getEntityType());
		sb.append(", entityId=");
		sb.append(getEntityId());
		sb.append(", attachmentText=");
		sb.append(getAttachmentText());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("sg.com.para.intranet.timesheet.services.model.Attachment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>attachmentId</column-name><column-value><![CDATA[");
		sb.append(getAttachmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityType</column-name><column-value><![CDATA[");
		sb.append(getEntityType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityId</column-name><column-value><![CDATA[");
		sb.append(getEntityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachmentText</column-name><column-value><![CDATA[");
		sb.append(getAttachmentText());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Attachment.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Attachment.class
		};
	private int _attachmentId;
	private String _entityType;
	private int _entityId;
	private String _attachmentText;
	private Attachment _escapedModel;
}